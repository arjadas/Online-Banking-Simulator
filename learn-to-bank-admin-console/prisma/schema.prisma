generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Transaction {
  transaction_id      Int                   @id @default(autoincrement())
  amount              Int
  sender_acc          Int
  recipient_acc       Int
  sender_uid          String
  recipient_uid       String
  recipient_address   String?
  reference           String
  description         String?
  timestamp           DateTime
  recc_transaction    RecurringTransaction? @relation(fields: [recc_transaction_id], references: [recc_transaction_id])
  recc_transaction_id Int?
  settled             Boolean
  type                String

  sender    Account @relation("transactionSender", fields: [sender_acc], references: [acc])
  recipient Account @relation("transactionRecipient", fields: [recipient_acc], references: [acc])
}

model Account {
  acc                             Int                    @id @default(autoincrement())
  bsb                             Int                    @default(123456)
  acc_name                        String
  uid                             String
  balance                         Int                    @default(0)
  pay_id                          String?
  biller_code                     Int?
  crn                             Int?
  short_description               String
  long_description                String?
  opened_timestamp                DateTime
  transactions_sent               Transaction[]          @relation("transactionSender")
  transactions_received           Transaction[]          @relation("transactionRecipient")
  recurring_transactions_sent     RecurringTransaction[] @relation("reccTransactionSender")
  recurring_transactions_received RecurringTransaction[] @relation("reccTransactionRecipient")
}

model RecurringTransaction {
  recc_transaction_id Int     @id @default(autoincrement())
  amount              Int
  sender_acc          Int
  recipient_acc       Int
  sender_uid          String
  recipient_uid       String
  recipient_address   String
  reference           String
  description         String?
  frequency           String

  sender    Account @relation("reccTransactionSender", fields: [sender_acc], references: [acc])
  recipient Account @relation("reccTransactionRecipient", fields: [recipient_acc], references: [acc])

  transaction Transaction[]
}

model MockUser {
  uid                String   @id
  first_name         String?
  middle_names       String?
  last_name          String?
  description        String?
  creation_timestamp DateTime
}

model UserPrevContact {
  user_prev_contact_id Int    @id @default(autoincrement())
  uid                  String
  contact_acc          Int
  contact_acc_name     String
  contact_uid          String
  contact_description  String
  user                 User   @relation(fields: [uid], references: [uid])
}

model User {
  uid                String    @id
  first_name         String
  middle_names       String?
  last_name          String
  email              String
  role               String
  font_preference    String?
  creation_timestamp DateTime
  last_login         DateTime?

  previous_contacts UserPrevContact[]

  notifications Notification[]
}

model Notification {
  notification_id String   @id
  uid             String
  timestamp       DateTime
  type            String
  content         String
  read            Boolean

  user User @relation(fields: [uid], references: [uid])
}

///npx prisma migrate diff --from-remote-d1 --to-schema-datamodel ./prisma/schema.prisma --script --output migrations/0004.sql
//npx prisma migrate diff --from-empty --to-schema-datamodel ./prisma/schema.prisma --script > migrations/0004.sql