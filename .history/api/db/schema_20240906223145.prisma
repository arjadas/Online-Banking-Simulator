// Don't forget to tell Prisma about your edits to this file using
// `yarn rw prisma migrate dev` or `yarn rw prisma db push`.
// `migrate` is like committing while `push` is for prototyping.
// Read more about both here:
// https://www.prisma.io/docs/orm/prisma-migrate

//npx prisma studio --schema="C:\Users\adend\OneDrive - The University of Melbourne\Online-Banking-Simulator\api\db\schema.prisma"

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

model Transaction {
  transaction_id     Int      @id @default(autoincrement())
  amount             Int
  sender_acc         Int      @map("sender_acc")
  recipient_acc      Int      @map("recipient_acc")
  sender_uid         String
  recipient_uid      String
  recipient_address  String
  reference          String
  description        String?
  timestamp          DateTime
  recc_transaction   RecurringTransaction? @relation(fields: [recc_transaction_id], references: [recc_transaction_id])
  recc_transaction_id Int?
  settled            Boolean
  type               TransactionType

  sender   Account  @relation("sender_account", fields: [sender_acc], references: [acc])
  recipient Account @relation("recipient_account", fields: [recipient_acc], references: [acc])
}

model Account {
  acc                Int       @id @default(autoincrement())
  acc_name           String
  uid                String
  pay_id             String?
  biller_code        Int?
  crn                Int?
  short_description  String
  long_description   String?
  opened_timestamp   DateTime
  transactions_sent  Transaction[] @relation("AccountSent")
  transactions_received Transaction[] @relation("AccountReceived")
}

model RecurringTransaction {
  recc_transaction_id Int     @id @default(autoincrement())
  amount              Int
  sender_acc          Int
  recipient_acc       Int
  sender_uid          String
  recipient_uid       String
  recipient_address   String
  reference           String
  description         String?
  frequency           String

  sender   Account  @relation("recc_sender_account", fields: [sender_acc], references: [acc])
  recipient Account @relation("recc_recipient_account", fields: [recipient_acc], references: [acc])
}

model MockUser {
  uid                String    @id
  first_name         String?
  surname            String?
  description        String?
  creation_timestamp DateTime
}

model DefaultTransaction {
  def_transaction_id  Int     @id @default(autoincrement())
  sender_uid          String
  recipient_uid       String
  sender_acc          Int
  recipient_acc       Int
  incoming            Boolean
  amount              Int
  recipient_address   String
  reference           String
  description         String?
  frequency           String?
}

model UserPrevContact {
  uid                String
  contact_acc        Int
  contact_acc_name   String
  contact_uid        String
  contact_description String

  @@id([uid, contact_acc])
  user User @relation(fields: [uid], references: [uid])
}

model User {
  uid                String    @id
  first_name         String
  surname            String
  email              String
  role               UserRole
  font_preference    FontPreference?
  creation_timestamp DateTime
  last_login         DateTime?

  previous_contacts UserPrevContact[]
}

model Notification {
  notification_id    String    @id
  uid                String
  timestamp          DateTime
  type               NotificationType
  content            String
  read               Boolean

  user   User @relation(fields: [uid], references: [uid])
}

enum TransactionType {
  salary
  interest
  transfer
}

enum UserRole {
  administrator
  student
}

enum FontPreference {
  small
  medium
  large
}

enum NotificationType {
  transaction
  reminder
  message
}
